# Gestión de Suscripciones de Clientes (Modular y Organizada)

Este proyecto es un sistema de backend para gestionar suscripciones de clientes a productos, implementado con Python (Flask) y MongoDB. La estructura está modularizada en directorios para una mejor organización y mantenibilidad.

## Estructura del Proyecto

* `app.py`: Punto de entrada de la aplicación Flask y definición de las rutas de la API.
* `config.py`: Maneja la configuración de la aplicación (e.g., URI de MongoDB).
* `database.py`: Gestiona la conexión y desconexión con la base de datos MongoDB.
* `models/`: Directorio que contiene las definiciones de las estructuras de datos.
    * `customer.py`: Define el modelo de datos para los clientes.
    * `product.py`: Define el modelo de datos para los productos.
    * `subscription.py`: Define el modelo de datos para las suscripciones.
    * `__init__.py`: (vacío) Indica que `models` es un paquete Python.
* `services/`: Directorio que contiene la lógica de negocio.
    * `subscription_service.py`: Contiene la lógica de negocio principal para las operaciones relacionadas con clientes, productos y suscripciones.
    * `__init__.py`: (vacío) Indica que `services` es un paquete Python.
* `requirements.txt`: Lista las dependencias del proyecto.
* `.env`: Almacena variables de entorno (e.g., credenciales de la DB).
* `Dockerfile`: Define cómo construir la imagen de Docker para la aplicación.
* `docker-compose.yml`: Orquesta los contenedores Docker (aplicación y base de datos).
* `README.md`: Este documento con instrucciones y detalles del proyecto.

## Requisitos

* Docker y Docker Compose (recomendado para un setup sencillo)
* Python 3.9+ (si no usas Docker)
* MongoDB (si no usas Docker)

## Configuración del Entorno (con Docker Compose - Recomendado)

1.  **Clona el repositorio:**
    ```bash
    git clone <URL_TU_REPOSITORIO>
    cd <nombre_del_repositorio>
    ```

2.  **Crea el archivo de variables de entorno:**
    Crea un archivo `.env` en la raíz del proyecto con el siguiente contenido:
    ```
    MONGO_URI=mongodb://mongodb:27017/
    MONGO_DB_NAME=subscription_manager
    ```

3.  **Inicia los servicios con Docker Compose:**
    ```bash
    docker-compose up --build
    ```
    Esto construirá la imagen de Docker para el backend, iniciará el contenedor de MongoDB y el contenedor del backend. La aplicación estará disponible en `http://localhost:5000`.

## Configuración del Entorno (local sin Docker)

1.  **Instala Python:** Asegúrate de tener Python 3.9 o superior instalado.

2.  **Instala MongoDB:** Instala MongoDB en tu sistema y asegúrate de que esté corriendo (normalmente en `mongodb://localhost:27017/`).

3.  **Crea un entorno virtual (recomendado):**
    ```bash
    python3 -m venv venv
    source venv/bin/activate  # En Windows: venv\Scripts\activate
    ```

4.  **Instala las dependencias:**
    ```bash
    pip install -r requirements.txt
    ```

5.  **Crea el archivo de variables de entorno:**
    Crea un archivo `.env` en la raíz del proyecto con el siguiente contenido:
    ```
    MONGO_URI=mongodb://localhost:27017/ # Ajusta si tu Mongo no está en localhost
    MONGO_DB_NAME=subscription_manager
    ```

6.  **Inicia la aplicación:**
    ```bash
    python app.py
    ```
    La aplicación se ejecutará en `http://localhost:5000`.

## Endpoints de la API

Todos los endpoints base son `http://localhost:5000`.

### Clientes

* **`POST /register_customer`**
    Registra un nuevo cliente.
    * **Body:** `{"name": "Nombre Cliente", "email": "cliente@example.com"}`
    * **Respuesta Exitosa (201 Created):** `{"message": "Customer registered successfully", "customer_id": "..."}`
    * **Respuesta de Error (400 Bad Request):** `{"error": "Name and email are required"}`
    * **Respuesta de Error (409 Conflict):** `{"error": "Customer with this email already exists"}`

### Productos

* **`POST /add_product`**
    Añade un nuevo producto.
    * **Body:** `{"name": "Nombre Producto", "description": "Descripción del producto", "customizable": true/false}`
    * **Respuesta Exitosa (201 Created):** `{"message": "Product added successfully", "product_id": "..."}`
    * **Respuesta de Error (400 Bad Request):** `{"error": "Name and description are required"}`
    * **Respuesta de Error (409 Conflict):** `{"error": "Product with this name already exists"}`

### Suscripciones

* **`POST /subscribe`**
    Permite a un cliente suscribirse a un producto.
    * **Body:** `{"customer_id": "...", "product_id": "...", "expiration_date": "YYYY-MM-DDTHH:MM:SS", "customization": {"key": "value"}}` (el campo `customization` es opcional y solo para productos personalizables)
    * **Respuesta Exitosa (201 Created):** `{"message": "Subscription created successfully", "subscription_id": "..."}`
    * **Respuesta de Error (400 Bad Request):** Varios errores, por ejemplo, `{"error": "Invalid customer_id or product_id format"}` o `{"error": "Invalid expiration date format..."}`.
    * **Respuesta de Error (404 Not Found):** `{"error": "Customer not found"}` o `{"error": "Product not found"}`.
    * **Respuesta de Error (409 Conflict):** `{"error": "Customer already has an active subscription for this product"}` o `{"error": "Product is not customizable..."}`.

* **`GET /subscription_status/<subscription_id>`**
    Obtiene el estado (activo/expirado) de una suscripción.
    * **Respuesta Exitosa (200 OK):** `{"subscription_id": "...", "status": "active/expired"}`
    * **Respuesta de Error (400 Bad Request):** `{"error": "Invalid subscription_id format"}`
    * **Respuesta de Error (404 Not Found):** `{"error": "Subscription not found"}`

* **`GET /subscription_settings/<subscription_id>`**
    Obtiene la configuración específica de una suscripción (personalización).
    * **Respuesta Exitosa (200 OK):** `{"subscription_id": "...", "settings": {"key": "value"}}`
    * **Respuesta de Error (400 Bad Request):** `{"error": "Invalid subscription_id format"}` o `{"error": "Product associated with this subscription is not customizable"}`
    * **Respuesta de Error (404 Not Found):** `{"error": "Subscription not found"}`

* **`PUT /edit_subscription_settings/<subscription_id>`**
    Modifica la configuración de una suscripción.
    * **Body:** `{"settings": {"new_key": "new_value"}}`
    * **Respuesta Exitosa (200 OK):** `{"message": "Subscription settings updated successfully"}` (o `{"message": "Settings already up to date, no changes made"}`)
    * **Respuesta de Error (400 Bad Request):** Varios errores, por ejemplo, `{"error": "New settings are required"}` o `{"error": "Product associated with this subscription is not customizable..."}`.
    * **Respuesta de Error (404 Not Found):** `{"error": "Subscription not found"}`

* **`PUT /extend_subscription/<subscription_id>`**
    Extiende la fecha de caducidad de una suscripción.
    * **Body:** `{"new_expiration_date": "YYYY-MM-DDTHH:MM:SS"}`
    * **Respuesta Exitosa (200 OK):** `{"message": "Subscription extended successfully"}` (o `{"message": "Subscription expiration date already set to this value"}`)
    * **Respuesta de Error (400 Bad Request):** Varios errores, por ejemplo, `{"error": "New expiration date is required"}` o `{"error": "Invalid new expiration date format..."}`.
    * **Respuesta de Error (404 Not Found):** `{"error": "Subscription not found"}`

## Cómo Probar (Ejemplos con `curl`)

Asumiendo que la API está corriendo en `http://localhost:5000`.

### Registrar un Cliente
```bash
curl -X POST -H "Content-Type: application/json" -d '{"name": "Juan Perez", "email": "juan.perez@example.com"}' http://localhost:5000/register_customer